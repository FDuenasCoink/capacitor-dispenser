/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package hardware.dispenser;

public class SMClass {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected SMClass(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(SMClass obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(SMClass obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        DispenserControlJNI.delete_SMClass(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  static public class StateMachine_t {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected StateMachine_t(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(StateMachine_t obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected static long swigRelease(StateMachine_t obj) {
      long ptr = 0;
      if (obj != null) {
        if (!obj.swigCMemOwn)
          throw new RuntimeException("Cannot release ownership as memory is not owned");
        ptr = obj.swigCPtr;
        obj.swigCMemOwn = false;
        obj.delete();
      }
      return ptr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          DispenserControlJNI.delete_SMClass_StateMachine_t(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setCurrState(SMClass.State_t value) {
      DispenserControlJNI.SMClass_StateMachine_t_CurrState_set(swigCPtr, this, value.swigValue());
    }
  
    public SMClass.State_t getCurrState() {
      return SMClass.State_t.swigToEnum(DispenserControlJNI.SMClass_StateMachine_t_CurrState_get(swigCPtr, this));
    }
  
    public StateMachine_t() {
      this(DispenserControlJNI.new_SMClass_StateMachine_t(), true);
    }
  
  }

  public SMClass(DispenserClass _DispenserClass_p) {
    this(DispenserControlJNI.new_SMClass(DispenserClass.getCPtr(_DispenserClass_p), _DispenserClass_p), true);
  }

  public void setSM(SMClass.StateMachine_t value) {
    DispenserControlJNI.SMClass_SM_set(swigCPtr, this, SMClass.StateMachine_t.getCPtr(value), value);
  }

  public SMClass.StateMachine_t getSM() {
    long cPtr = DispenserControlJNI.SMClass_SM_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SMClass.StateMachine_t(cPtr, false);
  }

  public void setLS(SMClass.StateMachine_t value) {
    DispenserControlJNI.SMClass_LS_set(swigCPtr, this, SMClass.StateMachine_t.getCPtr(value), value);
  }

  public SMClass.StateMachine_t getLS() {
    long cPtr = DispenserControlJNI.SMClass_LS_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SMClass.StateMachine_t(cPtr, false);
  }

  public void setEvento(SMClass.Event_t value) {
    DispenserControlJNI.SMClass_Evento_set(swigCPtr, this, value.swigValue());
  }

  public SMClass.Event_t getEvento() {
    return SMClass.Event_t.swigToEnum(DispenserControlJNI.SMClass_Evento_get(swigCPtr, this));
  }

  public void setEstado(SMClass.State_t value) {
    DispenserControlJNI.SMClass_Estado_set(swigCPtr, this, value.swigValue());
  }

  public SMClass.State_t getEstado() {
    return SMClass.State_t.swigToEnum(DispenserControlJNI.SMClass_Estado_get(swigCPtr, this));
  }

  public void InitStateMachine() {
    DispenserControlJNI.SMClass_InitStateMachine(swigCPtr, this);
  }

  public int StateMachineRun(SMClass.Event_t Event) {
    return DispenserControlJNI.SMClass_StateMachineRun(swigCPtr, this, Event.swigValue());
  }

  public int RunCheck() {
    return DispenserControlJNI.SMClass_RunCheck(swigCPtr, this);
  }

  public String StateMachineGetStateName(SMClass.State_t State) {
    return DispenserControlJNI.SMClass_StateMachineGetStateName(swigCPtr, this, State.swigValue());
  }

  public final static class State_t {
    public final static SMClass.State_t ST_IDLE = new SMClass.State_t("ST_IDLE");
    public final static SMClass.State_t ST_CONNECT = new SMClass.State_t("ST_CONNECT");
    public final static SMClass.State_t ST_INIT = new SMClass.State_t("ST_INIT");
    public final static SMClass.State_t ST_WAIT = new SMClass.State_t("ST_WAIT");
    public final static SMClass.State_t ST_MOVING_MOTOR = new SMClass.State_t("ST_MOVING_MOTOR");
    public final static SMClass.State_t ST_HANDING_CARD = new SMClass.State_t("ST_HANDING_CARD");
    public final static SMClass.State_t ST_ERROR = new SMClass.State_t("ST_ERROR");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static State_t swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + State_t.class + " with value " + swigValue);
    }

    private State_t(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private State_t(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private State_t(String swigName, State_t swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static State_t[] swigValues = { ST_IDLE, ST_CONNECT, ST_INIT, ST_WAIT, ST_MOVING_MOTOR, ST_HANDING_CARD, ST_ERROR };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class Event_t {
    public final static SMClass.Event_t EV_ANY = new SMClass.Event_t("EV_ANY");
    public final static SMClass.Event_t EV_SUCCESS_CONN = new SMClass.Event_t("EV_SUCCESS_CONN");
    public final static SMClass.Event_t EV_SUCCESS_INIT = new SMClass.Event_t("EV_SUCCESS_INIT");
    public final static SMClass.Event_t EV_CALL_DISPENSING = new SMClass.Event_t("EV_CALL_DISPENSING");
    public final static SMClass.Event_t EV_WAIT = new SMClass.Event_t("EV_WAIT");
    public final static SMClass.Event_t EV_CARD_IN_GATE = new SMClass.Event_t("EV_CARD_IN_GATE");
    public final static SMClass.Event_t EV_FINISH = new SMClass.Event_t("EV_FINISH");
    public final static SMClass.Event_t EV_RESET = new SMClass.Event_t("EV_RESET");
    public final static SMClass.Event_t EV_ERROR = new SMClass.Event_t("EV_ERROR");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Event_t swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Event_t.class + " with value " + swigValue);
    }

    private Event_t(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Event_t(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Event_t(String swigName, Event_t swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Event_t[] swigValues = { EV_ANY, EV_SUCCESS_CONN, EV_SUCCESS_INIT, EV_CALL_DISPENSING, EV_WAIT, EV_CARD_IN_GATE, EV_FINISH, EV_RESET, EV_ERROR };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
